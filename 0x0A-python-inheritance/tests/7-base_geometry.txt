>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/TTD/7-base_geometry.py", line 21, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: name must be an integer
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/TTD/7-base_geometry.py", line 23, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: age must be greater than 0
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/TTD/7-base_geometry.py", line 23, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: distance must be greater than 0
>>> bg.integer_validator("distance", 4.15)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/TTD/7-base_geometry.py", line 21, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: distance must be an integer
>>> bg.integer_validator("radius", -4.15)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/TTD/7-base_geometry.py", line 21, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: radius must be an integer
>>> bg.integer_validator("radius", True)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/TTD/7-base_geometry.py", line 21, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: radius must be an integer
>>> bg.integer_validator("radius", None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/TTD/7-base_geometry.py", line 21, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: radius must be an integer
>>> bg.integer_validator(12, 15)
>>> bg.area()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/TTD/7-base_geometry.py", line 16, in area
    raise Exception("area() is not implemented")
Exception: area() is not implemented
>>> bg.integer_validator()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> bg.integer_validator("area")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> bg.integer_validator("size", [1, 2, 3])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/TTD/7-base_geometry.py", line 21, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: size must be an integer
>>> bg.integer_validator("size", (1, ))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/TTD/7-base_geometry.py", line 21, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: size must be an integer
>>> bg.integer_validator("size", {1})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/TTD/7-base_geometry.py", line 21, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: size must be an integer
>>> bg.integer_validator("radius", False)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/TTD/7-base_geometry.py", line 21, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: radius must be an integer
