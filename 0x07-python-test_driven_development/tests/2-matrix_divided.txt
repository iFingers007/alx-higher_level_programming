>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix_divided([])
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'
>>> matrix_divided()
Traceback (most recent call last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
>>> matrix_divided([], 2)
Traceback (most recent call last):
IndexError: list index out of range
>>> matrix_divided([[]], 2)
[[]]
>>> matrix_divided([[3]], 2)
[[1.5]]
>>> matrix_divided([[3, 5]], 2)
[[1.5, 2.5]]
>>> matrix_divided([[3, 5, 7]], 2)
[[1.5, 2.5, 3.5]]
>>> matrix_divided([[3, 5, 7],[9, 11, 13]], 2)
[[1.5, 2.5, 3.5], [4.5, 5.5, 6.5]]
>>> matrix_divided([[-3, -5, -7],[9, 11, 13]], 2)
[[-1.5, -2.5, -3.5], [4.5, 5.5, 6.5]]
>>> matrix_divided([[-3, -5],[9, 11]], 3)
[[-1.0, -1.67], [3.0, 3.67]]
>>> matrix_divided([[-3, -5],[9, '11']], 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[-3, '5'],[9, 11]], 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[3.2, 5.2],[9.3, 11.5]], 2)
[[1.6, 2.6], [4.65, 5.75]]
>>> matrix_divided([[3.2, 5.2],[9.3, 11.5]], 2.4)
[[1.33, 2.17], [3.88, 4.79]]
>>> matrix_divided([[3.2, 5.2, 3.4],[9.3, 11.5]], 2)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size
>>> matrix_divided([[3, 5, 3],[9, 11]], 2)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size
>>> matrix_divided([[3, 5, 3],[9, 11, 3, 4]], 2)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size
>>> matrix_divided([[3, 5, 3],[9, 11, 0]], 7)
[[0.43, 0.71, 0.43], [1.29, 1.57, 0.0]]
>>> matrix_divided([[33.5],[13],[98.7]], 7)
[[4.79], [1.86], [14.1]]
>>> matrix_divided([[33.5],[-13],[-98.7]], 7)
[[4.79], [-1.86], [-14.1]]
>>> matrix_divided([[33.5],[-13],[-98.7]], -2)
[[-16.75], [6.5], [49.35]]
>>> matrix_divided([[3.5],[-13],[-9]], -2.8)
[[-1.25], [4.64], [3.21]]
>>> matrix_divided([[3.5],[-13],[-9]], 2.8)
[[1.25], [-4.64], [-3.21]]
>>> matrix_divided([[3.5],[27],[-9]], '3')
Traceback (most recent call last):
TypeError: div must be a number
>>> matrix_divided([[3.5],[27],[-9]], 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero
>>> matrix_divided([[3.5],[27],[-9]], 3*2)
[[0.58], [4.5], [-1.5]]
>>> matrix_divided([[3.5],[27],[-9]], 3/2)
[[2.33], [18.0], [-6.0]]
>>> matrix_divided([[3.5],[27],[-9]], 3+2)
[[0.7], [5.4], [-1.8]]
>>> matrix_divided([[3.5],[27],[-9]], 3-2)
[[3.5], [27.0], [-9.0]]
>>> matrix_divided([[3.5],[27],[-9]], -3-2)
[[-0.7], [-5.4], [1.8]]
>>> matrix_divided([[3.5],[27],[-9]], 2**3)
[[0.44], [3.38], [-1.12]]
>>> matrix_divided([[3.5],[27],[-9]], 2 + 3j)
Traceback (most recent call last):
TypeError: div must be a number
>>> matrix_divided([[3.5],[27],[-9]], [])
Traceback (most recent call last):
TypeError: div must be a number
>>> matrix_divided([[3.5],[27],[-9]], [2])
Traceback (most recent call last):
TypeError: div must be a number
>>> matrix_divided([[3.5],[27],[-9]], float("inf"))
[[0.0], [0.0], [-0.0]]
>>> matrix_divided([[3.5],[27],[-9]], float("nan"))
[[nan], [nan], [nan]]
>>> matrix_divided([[3.5],[27],[-9]], float("-inf"))
[[-0.0], [-0.0], [0.0]]
>>> matrix_divided([[0], [0], [0]], 2)
[[0.0], [0.0], [0.0]]
>>> matrix_divided([[0], [0], [0]], 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/TTD/2-matrix_divided.py", line 33, in matrix_divided
    raise ZeroDivisionError("division by zero")
ZeroDivisionError: division by zero
